from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import requests
import random

import config
import keyboard

bot = Bot(token=config.telegram_token) # –¢–æ–∫–µ–Ω
dp = Dispatcher(bot)

async def get_history(phone, token):
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' + token 

    parameters = {
    'rows': 4, 'operation': 'IN'
    }

    h = s.get(f'https://edge.qiwi.com/payment-history/v2/persons/{phone}/payments', params = parameters)

    return h.json()

@dp.message_handler(commands=['start'])
async def handler(message: types.Message):
    await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.', reply_markup=keyboard.buy_lic)

@dp.message_handler(text='üîí –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø üîí')
async def handler(message: types.Message):
    random_code = random.randint(1, 1000000)

    if config.pay_to_nick:
        link = f"https://qiwi.com/payment/form/99999?extra%5B%27account%27%5D={config.nick}&amountInteger={config.cost}&amountFraction=0&extra%5B%27comment%27%5D={random_code}&currency=643&blocked%5B0%5D=sum&blocked%5B1%5D=comment&blocked%5B2%5D=account"

        payment = InlineKeyboardMarkup()
        payment.add(InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data = f'check_payment_{random_code}'), InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=link))

        await message.reply(f'üíµ –û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø üíµ\n\nüì± –ù–∏–∫–Ω–µ–π–º: {config.nick}\nüîê –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {random_code} (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ñ–ò–¢–ï)\nüí∞ –¶–µ–Ω–∞: {config.cost}—Ä\n\nüöÄ –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ', reply=False, reply_markup=payment)
    else:
        link = f"https://qiwi.com/payment/form/99?extra%5B%27account%27%5D={config.number}&amountInteger={config.cost}&amountFraction=0&extra%5B%27comment%27%5D={random_code}&currency=643&blocked%5B0%5D=sum&blocked%5B1%5D=comment&blocked%5B2%5D=account"

        payment = InlineKeyboardMarkup()
        payment.add(InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data = f'check_payment_{random_code}'), InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=link))

        await message.reply(f'üíµ –û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø üíµ\n\nüì± –ù–æ–º–µ—Ä: {config.number}\nüîê –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {random_code}\nüí∞ –¶–µ–Ω–∞: {config.cost}—Ä\n\nüöÄ –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ', reply=False, reply_markup=payment)

@dp.callback_query_handler(text_contains='check_payment_')
async def menu(call: types.CallbackQuery):
    code = call.data[14:]
    result_pay = False
    try:
        qiwi_history = await get_history(config.number, config.qiwi)

        for i in range(4):
            if qiwi_history['data'][i]['comment'] == str(code) and qiwi_history['data'][i]['sum']['amount'] == int(config.cost):
                result_pay = True
                await call.message.edit_text(f'üîê –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ üîê')
        if not result_pay:
            payment = InlineKeyboardMarkup()
            payment.add(InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data = f'check_payment_{code}'))
            await bot.send_message(call.from_user.id, '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.', reply_markup=payment)
    except Exception as e:
        payment = InlineKeyboardMarkup()
        payment.add(InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data = f'check_payment_{code}'))
        await bot.send_message(call.from_user.id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –æ–ø–ª–∞—Ç—É, —É–≤–µ–¥–æ–º–∏—Ç–µ –µ–≥–æ –æ–± —ç—Ç–æ–º")
        print(e)

executor.start_polling(dp)
